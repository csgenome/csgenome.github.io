{"version":3,"file":"static/webpack/static/development/pages/vistest1.js.6172241307c0bc3dbae5.hot-update.js","sources":["webpack:///./src/dndtree.js"],"sourcesContent":["// There is a d3 version 3 (v3) version at http://bl.ocks.org/robschmuecker/7880033 with features such as zoom/pan.\n// The version below is the d3 version 5 (v5) version taken from Bostock's observable at\n// https://observablehq.com/@d3/tidy-tree\n\nimport * as d3 from 'd3';\nimport { Library } from '@observablehq/stdlib';\nconst { DOM } = Library;\nconsole.dir(Library);\nconsole.dir(DOM);\n\n// Get JSON data\nexport default function drawTheTree(treeContainer, treeData) {\n  const width = 932;\n\n  const tree = data => {\n    const root = d3.hierarchy(data);\n    root.dx = 10;\n    root.dy = width / (root.height + 1);\n    return d3.tree().nodeSize([root.dx, root.dy])(root);\n  }\n\n  const data = treeData;\n\n  function chart () {\n    const root = tree(data);\n\n    let x0 = Infinity;\n    let x1 = -x0;\n    root.each(d => {\n      if (d.x > x1) x1 = d.x;\n      if (d.x < x0) x0 = d.x;\n    });\n\n    const svg = d3.select(DOM.svg(width, x1 - x0 + root.dx * 2))\n        .style(\"width\", \"100%\")\n        .style(\"height\", \"auto\");\n\n    const g = svg.append(\"g\")\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"font-size\", 10)\n        .attr(\"transform\", `translate(${root.dy / 3},${root.dx - x0})`);\n\n    const link = g.append(\"g\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#555\")\n      .attr(\"stroke-opacity\", 0.4)\n      .attr(\"stroke-width\", 1.5)\n    .selectAll(\"path\")\n      .data(root.links())\n      .join(\"path\")\n        .attr(\"d\", d3.linkHorizontal()\n            .x(d => d.y)\n            .y(d => d.x));\n\n    const node = g.append(\"g\")\n        .attr(\"stroke-linejoin\", \"round\")\n        .attr(\"stroke-width\", 3)\n      .selectAll(\"g\")\n      .data(root.descendants())\n      .join(\"g\")\n        .attr(\"transform\", d => `translate(${d.y},${d.x})`);\n\n    node.append(\"circle\")\n        .attr(\"fill\", d => d.children ? \"#555\" : \"#999\")\n        .attr(\"r\", 2.5);\n\n    node.append(\"text\")\n        .attr(\"dy\", \"0.31em\")\n        .attr(\"x\", d => d.children ? -6 : 6)\n        .attr(\"text-anchor\", d => d.children ? \"end\" : \"start\")\n        .text(d => d.data.name)\n      .clone(true).lower()\n        .attr(\"stroke\", \"white\");\n\n    return svg.node();\n  }\n\n  treeContainer.appendChild(chart());\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAKA;AASA;AAAA;AACA;AAAA;AAEA;AAMA;AAAA;AAEA;AACA;AAAA;AAGA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}